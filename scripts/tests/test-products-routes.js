// ========================================
// SCRIPT DE TESTING - RUTAS DE PRODUCTOS
// ========================================
// API Base: http://localhost:5500/api/v1/products
// 
// Endpoints testeados:
// ‚úÖ GET / - Obtener todos los productos (p√∫blico)
// ‚úÖ GET /:id - Obtener producto por ID (p√∫blico)
// ‚úÖ POST / - Crear producto (admin)
// ‚úÖ PUT /:id - Actualizar producto (admin)
// ‚úÖ DELETE /:id - Eliminar producto (admin)

const baseURL = 'http://localhost:5500/api/v1/products';
const authURL = 'http://localhost:5500/api/v1/auth';

// Variables para testing
let userToken = '';
let adminToken = '';
let testProductId = '';
const testEmail = `test_products_${Date.now()}@example.com`;

console.log('üì¶ === TESTING RUTAS DE PRODUCTOS ===');
console.log(`üåê Base URL: ${baseURL}`);
console.log('');

// ========================================
// FUNCI√ìN HELPER PARA HACER REQUESTS
// ========================================
async function makeRequest(endpoint, method = 'GET', data = null, token = null, baseUrl = baseURL) {
  const url = `${baseUrl}${endpoint}`;
  const options = {
    method,
    headers: {
      'Content-Type': 'application/json',
    }
  };

  if (token) {
    options.headers['Authorization'] = `Bearer ${token}`;
  }

  if (data && method !== 'GET') {
    options.body = JSON.stringify(data);
  }

  try {
    console.log(`üîÑ ${method} ${endpoint}`);
    console.log(`üì§ Data:`, data);
    
    const response = await fetch(url, options);
    const result = await response.json();
    
    console.log(`üì• Status: ${response.status}`);
    console.log(`üì• Response:`, result);
    console.log('‚îÄ'.repeat(50));
    
    return { response, result };
  } catch (error) {
    console.error(`‚ùå Error en ${method} ${endpoint}:`, error.message);
    console.log('‚îÄ'.repeat(50));
    return { error };
  }
}

// ========================================
// FUNCI√ìN PARA CONFIGURAR USUARIO DE PRUEBA
// ========================================
async function setupTestUser() {
  console.log('üîß === CONFIGURANDO USUARIO DE PRUEBA ===');
  
  // Registrar usuario normal
  const registerData = {
    nombre: 'Usuario Test Productos',
    email: testEmail,
    password: 'password123',
    telefono: '+34612345678'
  };

  const { response: registerResponse, result: registerResult } = await makeRequest('/register', 'POST', registerData, null, authURL);
  
  if (registerResponse && registerResponse.status === 201) {
    console.log('‚úÖ Usuario registrado');
  } else {
    console.log('‚ùå Error al registrar usuario');
    return false;
  }

  // Login para obtener token
  const loginData = {
    email: testEmail,
    password: 'password123'
  };

  const { response: loginResponse, result: loginResult } = await makeRequest('/login', 'POST', loginData, null, authURL);
  
  if (loginResponse && loginResponse.status === 200) {
    console.log('‚úÖ Login exitoso');
    userToken = loginResult.token;
    return true;
  } else {
    console.log('‚ùå Error en login');
    return false;
  }
}

// ========================================
// TESTS DE PRODUCTOS
// ========================================

async function runProductTests() {
  console.log('üöÄ INICIANDO TESTS DE PRODUCTOS...\n');

  // Configurar usuario de prueba
  const setupSuccess = await setupTestUser();
  if (!setupSuccess) {
    console.log('‚ùå No se pudo configurar el usuario de prueba');
  }

  // ========================================
  // 1. TEST: OBTENER TODOS LOS PRODUCTOS (P√öBLICO)
  // ========================================
  console.log('1Ô∏è‚É£ === TEST: OBTENER TODOS LOS PRODUCTOS (P√öBLICO) ===');
  
  const { response: getAllResponse, result: getAllResult } = await makeRequest('/', 'GET');
  
  if (getAllResponse && getAllResponse.status === 200) {
    console.log('‚úÖ Obtener productos exitoso');
    console.log(`üìä Total de productos: ${getAllResult.products?.length || 0}`);
  } else {
    console.log('‚ùå Error al obtener productos');
  }

  // ========================================
  // 2. TEST: OBTENER PRODUCTOS CON PAR√ÅMETROS DE B√öSQUEDA
  // ========================================
  console.log('2Ô∏è‚É£ === TEST: OBTENER PRODUCTOS CON B√öSQUEDA ===');
  
  const { response: searchResponse } = await makeRequest('/?search=test&category=ropa&minPrice=10&maxPrice=100&page=1&limit=10', 'GET');
  
  if (searchResponse && searchResponse.status === 200) {
    console.log('‚úÖ B√∫squeda de productos exitosa');
  } else {
    console.log('‚ùå Error en b√∫squeda de productos');
  }

  // ========================================
  // 3. TEST: OBTENER PRODUCTO POR ID INEXISTENTE
  // ========================================
  console.log('3Ô∏è‚É£ === TEST: OBTENER PRODUCTO POR ID INEXISTENTE ===');
  
  const { response: notFoundResponse } = await makeRequest('/99999', 'GET');
  
  if (notFoundResponse && notFoundResponse.status === 404) {
    console.log('‚úÖ Producto no encontrado manejado correctamente');
  } else {
    console.log('‚ùå Deber√≠a devolver 404 para producto inexistente');
  }

  // ========================================
  // 4. TEST: CREAR PRODUCTO SIN PERMISOS ADMIN
  // ========================================
  console.log('4Ô∏è‚É£ === TEST: CREAR PRODUCTO SIN PERMISOS ADMIN ===');
  
  const productData = {
    nombre: 'Producto Test',
    descripcion: 'Descripci√≥n del producto test',
    precio: 29.99,
    categoria: 'test',
    stock: 100,
    imagenes: ['https://example.com/image1.jpg']
  };

  const { response: createResponse } = await makeRequest('/', 'POST', productData, userToken);
  
  if (createResponse && createResponse.status === 403) {
    console.log('‚úÖ Creaci√≥n sin permisos admin denegada correctamente');
  } else {
    console.log('‚ùå Deber√≠a denegar creaci√≥n a usuario no admin');
  }

  // ========================================
  // 5. TEST: CREAR PRODUCTO SIN TOKEN
  // ========================================
  console.log('5Ô∏è‚É£ === TEST: CREAR PRODUCTO SIN TOKEN ===');
  
  const { response: noTokenResponse } = await makeRequest('/', 'POST', productData);
  
  if (noTokenResponse && noTokenResponse.status === 401) {
    console.log('‚úÖ Creaci√≥n sin token denegada correctamente');
  } else {
    console.log('‚ùå Deber√≠a denegar creaci√≥n sin token');
  }

  // ========================================
  // 6. TEST: ACTUALIZAR PRODUCTO SIN PERMISOS
  // ========================================
  console.log('6Ô∏è‚É£ === TEST: ACTUALIZAR PRODUCTO SIN PERMISOS ===');
  
  const updateData = {
    nombre: 'Producto Actualizado',
    precio: 39.99
  };

  const { response: updateResponse } = await makeRequest('/1', 'PUT', updateData, userToken);
  
  if (updateResponse && updateResponse.status === 403) {
    console.log('‚úÖ Actualizaci√≥n sin permisos admin denegada correctamente');
  } else {
    console.log('‚ùå Deber√≠a denegar actualizaci√≥n a usuario no admin');
  }

  // ========================================
  // 7. TEST: ELIMINAR PRODUCTO SIN PERMISOS
  // ========================================
  console.log('7Ô∏è‚É£ === TEST: ELIMINAR PRODUCTO SIN PERMISOS ===');
  
  const { response: deleteResponse } = await makeRequest('/1', 'DELETE', null, userToken);
  
  if (deleteResponse && deleteResponse.status === 403) {
    console.log('‚úÖ Eliminaci√≥n sin permisos admin denegada correctamente');
  } else {
    console.log('‚ùå Deber√≠a denegar eliminaci√≥n a usuario no admin');
  }

  // ========================================
  // 8. TEST: VALIDACI√ìN DE DATOS EN CREACI√ìN
  // ========================================
  console.log('8Ô∏è‚É£ === TEST: VALIDACI√ìN DE DATOS EN CREACI√ìN ===');
  
  const invalidProductData = {
    nombre: '', // Nombre vac√≠o
    precio: -10 // Precio negativo
  };

  const { response: validationResponse } = await makeRequest('/', 'POST', invalidProductData, userToken);
  
  if (validationResponse && validationResponse.status === 400) {
    console.log('‚úÖ Validaci√≥n de datos fall√≥ correctamente');
  } else {
    console.log('‚ùå Deber√≠a fallar la validaci√≥n de datos');
  }

  // ========================================
  // 9. TEST: OBTENER PRODUCTO POR ID V√ÅLIDO (si existe)
  // ========================================
  console.log('9Ô∏è‚É£ === TEST: OBTENER PRODUCTO POR ID V√ÅLIDO ===');
  
  // Intentar obtener un producto con ID 1
  const { response: getByIdResponse, result: getByIdResult } = await makeRequest('/1', 'GET');
  
  if (getByIdResponse && getByIdResponse.status === 200) {
    console.log('‚úÖ Obtener producto por ID exitoso');
    console.log(`üì¶ Producto: ${getByIdResult.product?.nombre || 'Sin nombre'}`);
  } else if (getByIdResponse && getByIdResponse.status === 404) {
    console.log('‚ö†Ô∏è No hay productos con ID 1 en la base de datos');
  } else {
    console.log('‚ùå Error al obtener producto por ID');
  }

  // ========================================
  // 10. TEST: OBTENER PRODUCTOS CON PAGINACI√ìN
  // ========================================
  console.log('üîü === TEST: OBTENER PRODUCTOS CON PAGINACI√ìN ===');
  
  const { response: paginationResponse, result: paginationResult } = await makeRequest('/?page=1&limit=5', 'GET');
  
  if (paginationResponse && paginationResponse.status === 200) {
    console.log('‚úÖ Paginaci√≥n funcionando correctamente');
    console.log(`üìÑ P√°gina 1, l√≠mite 5, total: ${paginationResult.products?.length || 0}`);
  } else {
    console.log('‚ùå Error en paginaci√≥n');
  }

  console.log('\nüéâ === TESTS DE PRODUCTOS COMPLETADOS ===');
  console.log(`üîë Token obtenido: ${userToken ? 'S√ç' : 'NO'}`);
  console.log(`üì¶ Productos encontrados en DB: ${getAllResult?.products?.length || 0}`);
  
  return { userToken };
}

// ========================================
// EJECUTAR TESTS
// ========================================
if (typeof globalThis !== 'undefined' && globalThis.process?.argv[1] && import.meta.url.includes(globalThis.process.argv[1])) {
  runProductTests().catch(console.error);
}

export { runProductTests };
