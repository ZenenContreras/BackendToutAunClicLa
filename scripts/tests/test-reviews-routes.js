// ========================================
// SCRIPT DE TESTING - RUTAS DE RESE√ëAS
// ========================================
// API Base: http://localhost:5500/api/v1/reviews
// 
// Endpoints testeados:
// ‚úÖ GET /product/:productId - Obtener rese√±as de producto (p√∫blico)
// ‚úÖ POST / - Crear rese√±a (protegido)
// ‚úÖ PUT /:id - Actualizar rese√±a (protegido)
// ‚úÖ DELETE /:id - Eliminar rese√±a (protegido)

const baseURL = 'http://localhost:5500/api/v1/reviews';
const authURL = 'http://localhost:5500/api/v1/auth';

// Variables para testing
let userToken = '';
let testReviewId = '';
const testEmail = `test_reviews_${Date.now()}@example.com`;
const testProductId = 1; // Asumiendo que existe un producto con ID 1

console.log('‚≠ê === TESTING RUTAS DE RESE√ëAS ===');
console.log(`üåê Base URL: ${baseURL}`);
console.log(`üì¶ Product ID de prueba: ${testProductId}`);
console.log('');

// ========================================
// FUNCI√ìN HELPER PARA HACER REQUESTS
// ========================================
async function makeRequest(endpoint, method = 'GET', data = null, token = null, baseUrl = baseURL) {
  const url = `${baseUrl}${endpoint}`;
  const options = {
    method,
    headers: {
      'Content-Type': 'application/json',
    }
  };

  if (token) {
    options.headers['Authorization'] = `Bearer ${token}`;
  }

  if (data && method !== 'GET') {
    options.body = JSON.stringify(data);
  }

  try {
    console.log(`üîÑ ${method} ${endpoint}`);
    console.log(`üì§ Data:`, data);
    
    const response = await fetch(url, options);
    const result = await response.json();
    
    console.log(`üì• Status: ${response.status}`);
    console.log(`üì• Response:`, result);
    console.log('‚îÄ'.repeat(50));
    
    return { response, result };
  } catch (error) {
    console.error(`‚ùå Error en ${method} ${endpoint}:`, error.message);
    console.log('‚îÄ'.repeat(50));
    return { error };
  }
}

// ========================================
// FUNCI√ìN PARA CONFIGURAR USUARIO DE PRUEBA
// ========================================
async function setupTestUser() {
  console.log('üîß === CONFIGURANDO USUARIO DE PRUEBA ===');
  
  // Registrar usuario
  const registerData = {
    nombre: 'Usuario Test Rese√±as',
    email: testEmail,
    password: 'password123',
    telefono: '+34612345678'
  };

  const { response: registerResponse, result: registerResult } = await makeRequest('/register', 'POST', registerData, null, authURL);
  
  if (registerResponse && registerResponse.status === 201) {
    console.log('‚úÖ Usuario registrado');
  } else {
    console.log('‚ùå Error al registrar usuario');
    return false;
  }

  // Login para obtener token
  const loginData = {
    email: testEmail,
    password: 'password123'
  };

  const { response: loginResponse, result: loginResult } = await makeRequest('/login', 'POST', loginData, null, authURL);
  
  if (loginResponse && loginResponse.status === 200) {
    console.log('‚úÖ Login exitoso');
    userToken = loginResult.token;
    return true;
  } else {
    console.log('‚ùå Error en login');
    return false;
  }
}

// ========================================
// TESTS DE RESE√ëAS
// ========================================

async function runReviewTests() {
  console.log('üöÄ INICIANDO TESTS DE RESE√ëAS...\n');

  // Configurar usuario de prueba
  const setupSuccess = await setupTestUser();
  if (!setupSuccess) {
    console.log('‚ùå No se pudo configurar el usuario de prueba');
    return;
  }

  // ========================================
  // 1. TEST: OBTENER RESE√ëAS DE PRODUCTO (P√öBLICO)
  // ========================================
  console.log('1Ô∏è‚É£ === TEST: OBTENER RESE√ëAS DE PRODUCTO (P√öBLICO) ===');
  
  const { response: getReviewsResponse, result: getReviewsResult } = await makeRequest(`/product/${testProductId}`, 'GET');
  
  if (getReviewsResponse && getReviewsResponse.status === 200) {
    console.log('‚úÖ Obtener rese√±as de producto exitoso');
    console.log(`üìä Rese√±as encontradas: ${getReviewsResult.reviews?.length || 0}`);
    console.log(`‚≠ê Promedio: ${getReviewsResult.averageRating || 'N/A'}`);
  } else {
    console.log('‚ùå Error al obtener rese√±as de producto');
  }

  // ========================================
  // 2. TEST: CREAR RESE√ëA (FORMATO DB)
  // ========================================
  console.log('2Ô∏è‚É£ === TEST: CREAR RESE√ëA (FORMATO DB) ===');
  
  const reviewDataDB = {
    producto_id: testProductId,
    estrellas: 5,
    comentario: 'Excelente producto, muy recomendado!'
  };

  const { response: createResponse, result: createResult } = await makeRequest('/', 'POST', reviewDataDB, userToken);
  
  if (createResponse && createResponse.status === 201) {
    console.log('‚úÖ Rese√±a creada exitosamente (formato DB)');
    testReviewId = createResult.review?.id;
  } else {
    console.log('‚ùå Error al crear rese√±a (formato DB)');
  }

  // ========================================
  // 3. TEST: CREAR RESE√ëA (FORMATO FRONTEND)
  // ========================================
  console.log('3Ô∏è‚É£ === TEST: CREAR RESE√ëA (FORMATO FRONTEND) ===');
  
  const reviewDataFrontend = {
    productId: testProductId,
    rating: 4,
    comment: 'Buen producto, pero podr√≠a mejorar en algunos aspectos.'
  };

  const { response: createFrontendResponse } = await makeRequest('/', 'POST', reviewDataFrontend, userToken);
  
  if (createFrontendResponse && createFrontendResponse.status === 201) {
    console.log('‚úÖ Rese√±a creada exitosamente (formato Frontend)');
  } else if (createFrontendResponse && createFrontendResponse.status === 400) {
    console.log('‚ö†Ô∏è Usuario ya tiene rese√±a para este producto (esperado si se permite una sola rese√±a por usuario)');
  } else {
    console.log('‚ùå Error al crear rese√±a (formato Frontend)');
  }

  // ========================================
  // 4. TEST: OBTENER RESE√ëAS DESPU√âS DE CREAR
  // ========================================
  console.log('4Ô∏è‚É£ === TEST: OBTENER RESE√ëAS DESPU√âS DE CREAR ===');
  
  const { response: getAfterCreateResponse, result: getAfterCreateResult } = await makeRequest(`/product/${testProductId}`, 'GET');
  
  if (getAfterCreateResponse && getAfterCreateResponse.status === 200) {
    console.log('‚úÖ Obtener rese√±as despu√©s de crear exitoso');
    console.log(`üìä Rese√±as totales: ${getAfterCreateResult.reviews?.length || 0}`);
    console.log(`‚≠ê Nuevo promedio: ${getAfterCreateResult.averageRating || 'N/A'}`);
  } else {
    console.log('‚ùå Error al obtener rese√±as despu√©s de crear');
  }

  // ========================================
  // 5. TEST: ACTUALIZAR RESE√ëA
  // ========================================
  console.log('5Ô∏è‚É£ === TEST: ACTUALIZAR RESE√ëA ===');
  
  if (testReviewId) {
    const updateData = {
      estrellas: 3,
      comentario: 'He cambiado de opini√≥n, es un producto regular.'
    };

    const { response: updateResponse } = await makeRequest(`/${testReviewId}`, 'PUT', updateData, userToken);
    
    if (updateResponse && updateResponse.status === 200) {
      console.log('‚úÖ Rese√±a actualizada exitosamente');
    } else {
      console.log('‚ùå Error al actualizar rese√±a');
    }
  } else {
    console.log('‚ö†Ô∏è No hay rese√±a para actualizar');
  }

  // ========================================
  // 6. TEST: ACTUALIZAR RESE√ëA INEXISTENTE
  // ========================================
  console.log('6Ô∏è‚É£ === TEST: ACTUALIZAR RESE√ëA INEXISTENTE ===');
  
  const updateFakeData = {
    estrellas: 5,
    comentario: 'Rese√±a inexistente'
  };

  const { response: updateFakeResponse } = await makeRequest('/99999', 'PUT', updateFakeData, userToken);
  
  if (updateFakeResponse && updateFakeResponse.status === 404) {
    console.log('‚úÖ Actualizaci√≥n de rese√±a inexistente fall√≥ correctamente');
  } else {
    console.log('‚ùå Actualizaci√≥n de rese√±a inexistente deber√≠a fallar');
  }

  // ========================================
  // 7. TEST: VALIDACI√ìN DE DATOS
  // ========================================
  console.log('7Ô∏è‚É£ === TEST: VALIDACI√ìN DE DATOS ===');
  
  const invalidReviewData = {
    producto_id: 'invalid', // ID inv√°lido
    estrellas: 6, // Fuera de rango (1-5)
    comentario: '' // Comentario vac√≠o
  };

  const { response: validationResponse } = await makeRequest('/', 'POST', invalidReviewData, userToken);
  
  if (validationResponse && validationResponse.status === 400) {
    console.log('‚úÖ Validaci√≥n de datos funcionando correctamente');
  } else {
    console.log('‚ùå Validaci√≥n de datos no funcionando');
  }

  // ========================================
  // 8. TEST: CREAR RESE√ëA SIN TOKEN
  // ========================================
  console.log('8Ô∏è‚É£ === TEST: CREAR RESE√ëA SIN TOKEN ===');
  
  const reviewWithoutAuth = {
    producto_id: testProductId,
    estrellas: 5,
    comentario: 'Sin autenticaci√≥n'
  };

  const { response: noAuthResponse } = await makeRequest('/', 'POST', reviewWithoutAuth);
  
  if (noAuthResponse && noAuthResponse.status === 401) {
    console.log('‚úÖ Creaci√≥n sin token denegada correctamente');
  } else {
    console.log('‚ùå Creaci√≥n sin token deber√≠a ser denegada');
  }

  // ========================================
  // 9. TEST: OBTENER RESE√ëAS DE PRODUCTO INEXISTENTE
  // ========================================
  console.log('9Ô∏è‚É£ === TEST: OBTENER RESE√ëAS DE PRODUCTO INEXISTENTE ===');
  
  const { response: noProductResponse, result: noProductResult } = await makeRequest('/product/99999', 'GET');
  
  if (noProductResponse && noProductResponse.status === 200) {
    console.log('‚úÖ Obtener rese√±as de producto inexistente manejado');
    console.log(`üìä Rese√±as: ${noProductResult.reviews?.length || 0} (esperado: 0)`);
  } else {
    console.log('‚ùå Error al obtener rese√±as de producto inexistente');
  }

  // ========================================
  // 10. TEST: ELIMINAR RESE√ëA
  // ========================================
  console.log('üîü === TEST: ELIMINAR RESE√ëA ===');
  
  if (testReviewId) {
    const { response: deleteResponse } = await makeRequest(`/${testReviewId}`, 'DELETE', null, userToken);
    
    if (deleteResponse && deleteResponse.status === 200) {
      console.log('‚úÖ Rese√±a eliminada exitosamente');
    } else {
      console.log('‚ùå Error al eliminar rese√±a');
    }
  } else {
    console.log('‚ö†Ô∏è No hay rese√±a para eliminar');
  }

  // ========================================
  // 11. TEST: ELIMINAR RESE√ëA INEXISTENTE
  // ========================================
  console.log('1Ô∏è‚É£1Ô∏è‚É£ === TEST: ELIMINAR RESE√ëA INEXISTENTE ===');
  
  const { response: deleteFakeResponse } = await makeRequest('/99999', 'DELETE', null, userToken);
  
  if (deleteFakeResponse && deleteFakeResponse.status === 404) {
    console.log('‚úÖ Eliminaci√≥n de rese√±a inexistente fall√≥ correctamente');
  } else {
    console.log('‚ùå Eliminaci√≥n de rese√±a inexistente deber√≠a fallar');
  }

  // ========================================
  // 12. TEST: VERIFICAR RESE√ëAS DESPU√âS DE ELIMINAR
  // ========================================
  console.log('1Ô∏è‚É£2Ô∏è‚É£ === TEST: VERIFICAR RESE√ëAS DESPU√âS DE ELIMINAR ===');
  
  const { response: finalResponse, result: finalResult } = await makeRequest(`/product/${testProductId}`, 'GET');
  
  if (finalResponse && finalResponse.status === 200) {
    console.log('‚úÖ Verificaci√≥n final de rese√±as exitosa');
    console.log(`üìä Rese√±as finales: ${finalResult.reviews?.length || 0}`);
    console.log(`‚≠ê Promedio final: ${finalResult.averageRating || 'N/A'}`);
  } else {
    console.log('‚ùå Error en verificaci√≥n final');
  }

  console.log('\nüéâ === TESTS DE RESE√ëAS COMPLETADOS ===');
  console.log(`üîë Token obtenido: ${userToken ? 'S√ç' : 'NO'}`);
  console.log(`‚≠ê Review ID creada: ${testReviewId}`);
  console.log(`üì¶ Product ID usado: ${testProductId}`);
  
  return { userToken, testReviewId };
}

// ========================================
// EJECUTAR TESTS
// ========================================
if (typeof globalThis !== 'undefined' && globalThis.process?.argv[1] && import.meta.url.includes(globalThis.process.argv[1])) {
  runReviewTests().catch(console.error);
}

export { runReviewTests };
